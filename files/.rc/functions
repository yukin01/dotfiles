# vim:filetype=sh
function curlp() {
  while :; do curl -LI "$1" -o /dev/null -w '%{http_code}\n' -s; sleep 3; done
}

# ghq & code
function ghc() {
  local repo
  repo=$(ghq list | fzf)
  [[ -n "$repo" ]] && code "$(ghq root)/$repo"
}

# ghq & cd
function ghcd() {
  local repo
  repo=$(ghq list | fzf)
  [[ -n "$repo" ]] && cd "$(ghq root)/$repo" || return
}

# ghq & hub api & hub browse
function ghb() {
  [[ "$#" -eq 0 ]] && __log_fatal "No arguments."
  local repo
  repo=$(__get_github_repo "$@")
  [[ -n "$repo" ]] && hub browse "$repo"
}

# hub api & ghq get
function ghg() {
  [[ "$#" -eq 0 ]] && __log_fatal "No arguments."
  local repo
  repo=$(__get_github_repo "$@")
  [[ -n "$repo" ]] && ghq get -p "$repo"
}

function __log_fatal() {
  echo "$1" 1>&2
  return 1
}

function __get_github_repo() {
  local repo
  while getopts "ls:u:o:" OPT
  do
    case "${OPT}" in
      l)
        repo=$(ghq list | fzf | cut -d '/' -f 2,3);;
      s)
        repo=$(
          gh search repos "${OPTARG}" --json fullName \
          --jq '.[].fullName' | fzf
        );;
      u)
        repo=$(
          gh api users/"${OPTARG}"/repos --paginate \
            --jq '.[].full_name' | fzf
        );;
      o)
        repo=$(
          gh api --cache 1h orgs/"${OPTARG}"/repos --paginate \
            --jq '.[].full_name' | fzf
        );;
      *)
        ;;
    esac
  done
  echo "$repo"
}

# Change default branch from master to main
function github-main() {
  git branch -m master main
  git branch -u origin/main main
  git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main
}

function brew-formulae-usage() {
  brew list --formulae | xargs -P$(expr $(sysctl -n hw.ncpu) - 1) -I{} \
    sh -c 'brew uses --installed {} | wc -l | xargs printf "%20s is used by %2d formulae.\n" {}'
}

function get-current-shell() {
  # ps -p $$ -o comm=
  if [[ -n "$BASH_VERSION" ]]; then
    echo "bash"
  elif [[ -n "$ZSH_VERSION" ]]; then
    echo "zsh"
  else
    echo ""
  fi
}

function kubectl() {
  unset -f kubectl
  # lazy load
  local shell
  shell=$(get-current-shell)

  if [[ -n "$shell" ]]; then
    source <(kubectl completion "$shell")
    echo "kubectl completion has been loaded for $shell."
  fi

  [[ "$#" -eq 0 ]] || command kubectl "$@"
}

function gcloud() {
  unset -f gcloud
  # lazy load
  local shell
  shell=$(get-current-shell)

  if [[ -n "$shell" ]]; then
    source "$(brew --prefix)/share/google-cloud-sdk/completion.$shell.inc"
    echo "gcloud completion has been loaded for $shell."
  fi

  [[ "$#" -eq 0 ]] || command gcloud "$@"
}
